version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.3

parameters:
  stack-name:
    type: string
    default: "lecture13"


jobs:
  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Execute Cloudformation Template
          command: |
            aws cloudformation deploy \
            --stack-name << pipeline.parameters.stack-name >> \
            --template-file lecture10.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides NameBase=<< pipeline.parameters.stack-name >> AllowedSSHIP=0.0.0.0/0

  get-awsinfo:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          region: AWS_DEFAULT_REGION
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Get EC2 Public IP
          command: |
            ec2_public_ip=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].{Name:Tags[?Key==`Name`]|[0].Value, PublicIpAddress:PublicIpAddress}' --output text | grep << pipeline.parameters.stack-name >> | awk '{print $2}')
            echo "export EC2_PUBLIC_IP='$ec2_public_ip'" >> /tmp/awsinfo
      - run:
          name: Get RDS Credentials
          command: |
            rds_host=$(aws rds describe-db-instances --query 'DBInstances[].Endpoint.Address' --output text | xargs -n1 | grep << pipeline.parameters.stack-name >>)
            rds_secrets_name=$(aws secretsmanager list-secrets --query 'SecretList[*].Name' --output text | xargs -n1 | grep << pipeline.parameters.stack-name >>)
            rds_username=$(aws secretsmanager get-secret-value --secret-id $rds_secrets_name --query SecretString --output text | jq -r '.username')
            rds_password=$(aws secretsmanager get-secret-value --secret-id $rds_secrets_name --query SecretString --output text | jq -r '.password')
            echo "export RDS_HOST='$rds_host'" >> /tmp/awsinfo
            echo "export RDS_USERNAME='$rds_username'" >> /tmp/awsinfo
            echo "export RDS_PASSWORD='$rds_password'" >> /tmp/awsinfo
      - run:
          name: Get S3 Bucket Name
          command: |
            s3_bucket_name=$(aws s3api list-buckets --query "Buckets[].Name" --output text | xargs -n1 | grep << pipeline.parameters.stack-name >>)
            echo "export S3_BUCKET_NAME='$s3_bucket_name'" >> /tmp/awsinfo
      - persist_to_workspace:
          root: /tmp
          paths: awsinfo

  execute-ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints:
            - "SHA256:/X1kwFwBr64AA2Z0JTlyv4A4LFVxM/YU3jcoSs2xZrY"
      - ansible-playbook/install:
          version: 2.7.7
      - run:
          name: Execute Ansible
          command: |
            source /tmp/awsinfo
            ansible-playbook -u ec2-user -i "$EC2_PUBLIC_IP," --private-key ~/.ssh/id_rsa ansible/playbook.yml

  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - add_ssh_keys:
          fingerprints:
            - "SHA256:/X1kwFwBr64AA2Z0JTlyv4A4LFVxM/YU3jcoSs2xZrY"
      - run:
          name: Edit ~/.ssh/config file for Serverspec
          command: |
            source /tmp/awsinfo
            echo -e "\nHost target\n    HostName $EC2_PUBLIC_IP\n    User ec2-user\n    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
      - run:
          name: Install Serverspec
          command: gem install serverspec
      - run:
          name: Execute Serverspec
          command: |
            cd serverspec/
            rake spec:target


workflows:
  raisetech_aws:
    jobs:
      - execute-cloudformation
      - get-awsinfo:
          requires:
            - execute-cloudformation
      - execute-ansible:
          requires:
            - get-awsinfo
      - execute-serverspec:
          requires:
            - execute-ansible

